mapping = aes(x = DateOccur, y = count)) + geom_point(na.rm = TRUE) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
crimeTime
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
View(crimeFreq)
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), "-") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreqByDay$Description, function(x) x[1])
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
View(crimeFreq)
##7
class(crimeFreq)
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), "-") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(crimeFreq$Description, "-"/"") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(crimeFreq$Description, "[-/]") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(crimeFreq$Description, " ") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(crimeFreq$Description, "") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(crimeFreq$Description, "-") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), "[-/]") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), "[-/]") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), " ") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
##Counting number of different types of crimes by day
## (some of these crimes happened before March 2018, but they are all reported in March)
crimeFreq <- March2018 %>%
group_by(District, DateOccur, Description) %>%
dplyr::summarise(count = n()) ##Specifying dplyr because there is a conflict with plyr
#For looking at changes in data over time, we're going to take just the March occurances
crimeFreq$DateOccur <- as.Date(crimeFreq$DateOccur, format = "%m/%d/%Y")
crimeFreq <- crimeFreq %>%
arrange(DateOccur) %>%
filter(DateOccur >= "2018-03-01")
ggplot(data=crimeFreq) +
geom_histogram(mapping = aes(x = DateOccur), binwidth = 1) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
crimeTime <- ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) + geom_point(na.rm = TRUE) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
crimeTime
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), " ") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), " ") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), " ") ## Generalizing types of crimes
crimeFreq$Description <- strsplit(as.character(crimeFreq$Description), "-") ## Generalizing types of crimes
crimeFreq$Description <- sapply(crimeFreq$Description, function(x) x[1])
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = Description)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(colour = District)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(color = District)) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(color = as.factor(District))) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
##Another example with a legend
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
crimeTypeByDay <- select(March2018, DateOccur, Neighborhood)## subsetting data set for day and type of crime
##I set up a new table for any modified information rather than directly changing the original so I have the original for reference in case I accidently change anything.
crimeTypeByDay <- as_tibble(crimeTypeByDay)
crimeTypeByDay$DateOccur <- substr(crimeTypeByDay$DateOccur, 1,10)  ##Isolating date, removing timestamp
##Counting number of different types of crimes by day
## (some of these crimes happened before March 2018, but they are all reported in March)
crimeFreq <- March2018 %>%
group_by(District, DateOccur, Description) %>%
dplyr::summarise(count = n()) ##Specifying dplyr because there is a conflict with plyr
#For looking at changes in data over time, we're going to take just the March occurances
crimeFreq$DateOccur <- as.Date(crimeFreq$DateOccur, format = "%m/%d/%Y")
crimeFreq <- crimeFreq %>%
arrange(DateOccur) %>%
filter(DateOccur >= "2018-03-01")
ggplot(data=crimeFreq) +
geom_histogram(mapping = aes(x = DateOccur), binwidth = 1) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
##Scatterplot
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) + geom_point(na.rm = TRUE) +
labs(title = "March Overall Crime Over Time")+
xlab("Date")+
ylab("Overall Crimes")
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(color = as.factor(District))) +
labs(title = "March Overall Crime Over Time by District")+
xlab("Date")+
ylab("Overall Crimes")
##7
crimeFreq$District <- as.factor(crimeFreq$District)
ggplot(data=crimeFreq,
mapping = aes(x = DateOccur, y = count)) +
geom_point(na.rm = TRUE) +
geom_point(aes(color = District)) +
labs(title = "March Overall Crime Over Time by District")+
xlab("Date")+
ylab("Overall Crimes")
# 2) if you would like to build an output by sourcing your markdown document
install.packages("rmarkdown")
library(rmarkdown)
render("markdown_ex1.Rmd")
install.packages("bookdown")
library(bookdown)
---
title: "Markdown Tutorial"
author: "Min Hee Seo"
date: "4/26/2018"
output:
html_document: default
---
<!-- This is a comment. Comments are not displayed in the browser -->
<!--R Markdown is composed of three parts: 1) Header 2) Section 3) Code chunks -->
<!-- above is YAML header: surrounded by --- -->
# R Markdown
## Introduction
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents that include R codes and codes' automatically-generated output. Without knowing background knowledge on web langauges, users can create .html file using .Rmd. R Markdown also allows users to include images, tables, math, and hyperlinks to the document in an easier way. R Markdown also allow users to work easily collectively.
**Markdown** is an easy and flexible markup language, like *Latex*, but much simpler and much easier to export to other formats. **R Markdown** joins the convenience of **Markdown** with the ability to incorporate **R** commands, which should help you build files that are reproducible and easy to update.  For example, one can enter **R** mode simply by entering three backticks. **R Markdown** understands anything in between these sets of apostrophes as **R** code. For example, we can assign the following objects:
```{r}
r.star  <- 0.6
r.prime <- r.star/2
r.star.2 <- 0.5
r.prime.2 <- r.prime-0.1
r.star.1 <- 0.4
b.star.r   <- 0.4
b.star.r.2 <- 0.3
b.prime.l.2 <- 0.3
b.prime.l  <- 0.4
```
And we can then request **R Markdown** to elaborate a plot that is based on the objects that we defined previously.
```{r, echo=FALSE, eval=TRUE, fig.width=5, fig.height=3}
par (las=1, mar=c(2,2,1,1))
plot (c(0,1), c(0,1), type="n", axes=F, ylab="", xlab="")
axis (1, at=c(0,1), labels=FALSE)
axis (2, at=c(0,1), labels=FALSE)
segments (x0=r.star, x1=r.star, y0=0, y1=1, lty=3, lwd=2)
segments (x0=0, x1=r.star, y0=b.prime.l, y1=b.prime.l, lty=3, lwd=2)
segments (x0=r.prime, x1=r.prime, y0=b.prime.l, y1=0, lty=3, lwd=2)
# Margin annotations
mtext (expression(paste(r[3],"*",sep="")), side=1, line=0.5, at=r.star, cex=1.2)
mtext (expression(paste(r[3],"'",sep="")), side=1, line=0.5, at=r.prime, cex=1.2)
# mtext (expression(paste(delta[3],"*",sep="")), side=2, line=0.5, at=b.star.l+0.3, cex=1.2)
mtext (expression(paste(delta[3],"'",sep="")), side=2, line=0.5, at=b.prime.l, cex=1.2)
# Text annotations in graphic
text (x=1-(1-r.star)/2, y=0.65, "Venal mayor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime, y=b.prime.l + (1-b.prime.l)/2 + 0.15, "Selfless governor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.star-(r.star-r.prime)/2, y=b.prime.l/2 + 0.15, "Mixed", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime/2, y=b.prime.l/2 + 0.15, "Headhunter", cex=1.2, vfont=c("sans serif","bold"))
```
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For example, if you want summary() output to be embedded in the document,
```{r cars}
summary(cars)
```
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(AirPassengers)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
More specifically, Knitr package converts .Rmd file into .md files by executing all of the code chunks. Using pandoc, md files will be converted into whichever output format the user wants. These two steps allow users to create a wide variety of output formats.
## Syntax
### Headers
+ # Markdown
+ ## Markdown
+ ### Markdown
### Emphasis
- *Markdown*
- _Markdown_
- **Markdown**
- __Markdown__
- *__Markdown__*
- `code`
### Ordering
- using + (unordered)
- using - (unordered)
- using 1. 2. 3. (ordered)
### Other properties
- Including external link: [RStudio](http://www.rstudio.com)
- Including internal link: [Math](#Next)
- Including Horizontal line
---
***
___
- Including quotation:
> Change will not come if we wait for some other person or some other time.
> We are the ones we've been waiting for. We are the change that we seek.<cite> Barack Obama </cite>
### Chucks
Chunks saves our effort on including images, tables, and other output. Whenever there is a change in the code, the chunk automatically updates the changes to the outputs.
Inserting codes 1) mannually by clicking the button 2) press control + option + I (in MAC)
```{r}
# ``` backticks
# {} the term r and output options go here. For example, you can allow R to not evaluate the code within the chunk
# Code: all codes should be located within the chunk
```
```{r, echo=FALSE}
# echo=FALSE option will disply only the output and not the code itself
summary(mtcars)
```
```{r, results='hide'}
# results=hide option will not display the output but only display the code
summary(mtcars)
```
```{r, fig.width=4, fig.height=4, fig.align="center", fig.cap="Fig1. Sample Plot"}
# fig.width, fig.height, and fig.align options will allow user to customize the figure dimension
library(EBMAforecast)
data("presidentialForecast")
plot(presidentialForecast$Actual)
```
Other options include, `warning`, `error`, `message`, and `cache`.
warning: prevents warnings that are generated by code from appearing in the finished
message: prevents messages that are generated by code from appearing in the finished file
If cache=TRUE, r will save the output of the chunk to sepecially named filed on disk. On subsequent runs, knitr will check to see if the code has changed, and if it hasn't, it will resuse the cached results.
```{r myfirsttable}
# ugly table
coefficients(summary(lm(presidentialForecast$Actual ~ presidentialForecast$Abramowitz)))
```
There are several advantages in imposing a name to a chunk: 1) access your code easily 2) graphics created by the chuncks will have useful names 3) avoid re-performing expensive computations on every run.
```{r mysecondtable}
# install.packages("knitr")
# kable() will provide aesthetically pleasing output
library(knitr)
kable(coefficients(summary(lm(presidentialForecast$Actual ~ presidentialForecast$Abramowitz))))
```
### [Math](#Next)
$p(Y>0|X>0)$
$$p(y_i|\lambda)=\frac{\lambda^{y_i}\exp(-\lambda)}{y_i!}$$
$$
\begin{align*}
x_1 + 2x_2 + 3x_3 + 4x_4 + 5x_5 &=  7 \\
2x_1 +  x_2 + 2x_3 + 3x_4 + 4x_5 &= -1 \\
3x_1 + 2x_2 +  x_3 + 2x_4 + 3x_5 &= -3 \\
4x_1 + 3x_2 + 2x_3 +  x_4 + 2x_5 &=  5 \\
5x_1 + 4x_2 + 3x_3 + 2x_4 +  x_5 &= 17 \\
\end{align*}
$$
### Table
|right-align |left-align| default | centered |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
### Output formats
- html
- pdf
- word
- presentation slides
- interactive documents (ex. shiny)
- and more (website, dashboard, notebooks, etc.)
- You can also publish your markdown file in RPubs
- https://rmarkdown.rstudio.com/gallery.html
---
title: "Markdown Tutorial"
author: "Min Hee Seo"
date: "4/26/2018"
output:
html_document: default
---
<!-- This is a comment. Comments are not displayed in the browser -->
<!--R Markdown is composed of three parts: 1) Header 2) Section 3) Code chunks -->
<!-- above is YAML header: surrounded by --- -->
# R Markdown
## Introduction
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents that include R codes and codes' automatically-generated output. Without knowing background knowledge on web langauges, users can create .html file using .Rmd. R Markdown also allows users to include images, tables, math, and hyperlinks to the document in an easier way. R Markdown also allow users to work easily collectively.
**Markdown** is an easy and flexible markup language, like *Latex*, but much simpler and much easier to export to other formats. **R Markdown** joins the convenience of **Markdown** with the ability to incorporate **R** commands, which should help you build files that are reproducible and easy to update.  For example, one can enter **R** mode simply by entering three backticks. **R Markdown** understands anything in between these sets of apostrophes as **R** code. For example, we can assign the following objects:
```{r}
r.star  <- 0.6
r.prime <- r.star/2
r.star.2 <- 0.5
r.prime.2 <- r.prime-0.1
r.star.1 <- 0.4
b.star.r   <- 0.4
b.star.r.2 <- 0.3
b.prime.l.2 <- 0.3
b.prime.l  <- 0.4
```
And we can then request **R Markdown** to elaborate a plot that is based on the objects that we defined previously.
```{r, echo=FALSE, eval=TRUE, fig.width=5, fig.height=3}
par (las=1, mar=c(2,2,1,1))
plot (c(0,1), c(0,1), type="n", axes=F, ylab="", xlab="")
axis (1, at=c(0,1), labels=FALSE)
axis (2, at=c(0,1), labels=FALSE)
segments (x0=r.star, x1=r.star, y0=0, y1=1, lty=3, lwd=2)
segments (x0=0, x1=r.star, y0=b.prime.l, y1=b.prime.l, lty=3, lwd=2)
segments (x0=r.prime, x1=r.prime, y0=b.prime.l, y1=0, lty=3, lwd=2)
# Margin annotations
mtext (expression(paste(r[3],"*",sep="")), side=1, line=0.5, at=r.star, cex=1.2)
mtext (expression(paste(r[3],"'",sep="")), side=1, line=0.5, at=r.prime, cex=1.2)
# mtext (expression(paste(delta[3],"*",sep="")), side=2, line=0.5, at=b.star.l+0.3, cex=1.2)
mtext (expression(paste(delta[3],"'",sep="")), side=2, line=0.5, at=b.prime.l, cex=1.2)
# Text annotations in graphic
text (x=1-(1-r.star)/2, y=0.65, "Venal mayor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime, y=b.prime.l + (1-b.prime.l)/2 + 0.15, "Selfless governor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.star-(r.star-r.prime)/2, y=b.prime.l/2 + 0.15, "Mixed", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime/2, y=b.prime.l/2 + 0.15, "Headhunter", cex=1.2, vfont=c("sans serif","bold"))
```
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For example, if you want summary() output to be embedded in the document,
```{r cars}
summary(cars)
```
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(AirPassengers)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
More specifically, Knitr package converts .Rmd file into .md files by executing all of the code chunks. Using pandoc, md files will be converted into whichever output format the user wants. These two steps allow users to create a wide variety of output formats.
## Syntax
### Headers
+ # Markdown
+ ## Markdown
+ ### Markdown
### Emphasis
- *Markdown*
- _Markdown_
- **Markdown**
- __Markdown__
- *__Markdown__*
- `code`
### Ordering
- using + (unordered)
- using - (unordered)
- using 1. 2. 3. (ordered)
### Other properties
- Including external link: [RStudio](http://www.rstudio.com)
- Including internal link: [Math](#Next)
- Including Horizontal line
---
***
___
- Including quotation:
> Change will not come if we wait for some other person or some other time.
> We are the ones we've been waiting for. We are the change that we seek.<cite> Barack Obama </cite>
### Chucks
Chunks saves our effort on including images, tables, and other output. Whenever there is a change in the code, the chunk automatically updates the changes to the outputs.
Inserting codes 1) mannually by clicking the button 2) press control + option + I (in MAC)
```{r}
# ``` backticks
# {} the term r and output options go here. For example, you can allow R to not evaluate the code within the chunk
# Code: all codes should be located within the chunk
```
```{r, echo=FALSE}
# echo=FALSE option will disply only the output and not the code itself
summary(mtcars)
```
```{r, results='hide'}
# results=hide option will not display the output but only display the code
summary(mtcars)
```
```{r, fig.width=4, fig.height=4, fig.align="center", fig.cap="Fig1. Sample Plot"}
# fig.width, fig.height, and fig.align options will allow user to customize the figure dimension
library(EBMAforecast)
data("presidentialForecast")
plot(presidentialForecast$Actual)
```
Other options include, `warning`, `error`, `message`, and `cache`.
warning: prevents warnings that are generated by code from appearing in the finished
message: prevents messages that are generated by code from appearing in the finished file
If cache=TRUE, r will save the output of the chunk to sepecially named filed on disk. On subsequent runs, knitr will check to see if the code has changed, and if it hasn't, it will resuse the cached results.
```{r myfirsttable}
# ugly table
coefficients(summary(lm(presidentialForecast$Actual ~ presidentialForecast$Abramowitz)))
```
There are several advantages in imposing a name to a chunk: 1) access your code easily 2) graphics created by the chuncks will have useful names 3) avoid re-performing expensive computations on every run.
```{r mysecondtable}
# install.packages("knitr")
# kable() will provide aesthetically pleasing output
library(knitr)
kable(coefficients(summary(lm(presidentialForecast$Actual ~ presidentialForecast$Abramowitz))))
```
### [Math](#Next)
$p(Y>0|X>0)$
$$p(y_i|\lambda)=\frac{\lambda^{y_i}\exp(-\lambda)}{y_i!}$$
$$
\begin{align*}
x_1 + 2x_2 + 3x_3 + 4x_4 + 5x_5 &=  7 \\
2x_1 +  x_2 + 2x_3 + 3x_4 + 4x_5 &= -1 \\
3x_1 + 2x_2 +  x_3 + 2x_4 + 3x_5 &= -3 \\
4x_1 + 3x_2 + 2x_3 +  x_4 + 2x_5 &=  5 \\
5x_1 + 4x_2 + 3x_3 + 2x_4 +  x_5 &= 17 \\
\end{align*}
$$
### Table
|right-align |left-align| default | centered |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
### Output formats
- html
- pdf
- word
- presentation slides
- interactive documents (ex. shiny)
- and more (website, dashboard, notebooks, etc.)
- You can also publish your markdown file in RPubs
- https://rmarkdown.rstudio.com/gallery.html
# results=hide option will not display the output but only display the code
summary(mtcars)
# echo=FALSE option will disply only the output and not the code itself
summary(mtcars)
# echo=FALSE option will disply only the output and not the code itself
summary(mtcars)
#5
library(ggplot2)
# fig.width, fig.height, and fig.align options will allow user to customize the figure dimension
library(EBMAforecast)
r.star  <- 0.6
r.prime <- r.star/2
r.star.2 <- 0.5
r.prime.2 <- r.prime-0.1
r.star.1 <- 0.4
b.star.r   <- 0.4
b.star.r.2 <- 0.3
b.prime.l.2 <- 0.3
b.prime.l  <- 0.4
par (las=1, mar=c(2,2,1,1))
plot (c(0,1), c(0,1), type="n", axes=F, ylab="", xlab="")
axis (1, at=c(0,1), labels=FALSE)
axis (2, at=c(0,1), labels=FALSE)
segments (x0=r.star, x1=r.star, y0=0, y1=1, lty=3, lwd=2)
segments (x0=0, x1=r.star, y0=b.prime.l, y1=b.prime.l, lty=3, lwd=2)
segments (x0=r.prime, x1=r.prime, y0=b.prime.l, y1=0, lty=3, lwd=2)
# Margin annotations
mtext (expression(paste(r[3],"*",sep="")), side=1, line=0.5, at=r.star, cex=1.2)
mtext (expression(paste(r[3],"'",sep="")), side=1, line=0.5, at=r.prime, cex=1.2)
# mtext (expression(paste(delta[3],"*",sep="")), side=2, line=0.5, at=b.star.l+0.3, cex=1.2)
mtext (expression(paste(delta[3],"'",sep="")), side=2, line=0.5, at=b.prime.l, cex=1.2)
# Text annotations in graphic
text (x=1-(1-r.star)/2, y=0.65, "Venal mayor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime, y=b.prime.l + (1-b.prime.l)/2 + 0.15, "Selfless governor", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.star-(r.star-r.prime)/2, y=b.prime.l/2 + 0.15, "Mixed", cex=1.2, vfont=c("sans serif","bold"))
text (x=r.prime/2, y=b.prime.l/2 + 0.15, "Headhunter", cex=1.2, vfont=c("sans serif","bold"))
summary(cars)
plot(AirPassengers)
# ``` backticks
# {} the term r and output options go here. For example, you can allow R to not evaluate the code within the chunk
# Code: all codes should be located within the chunk
# echo=FALSE option will disply only the output and not the code itself
summary(mtcars)
# results=hide option will not display the output but only display the code
summary(mtcars)
# fig.width, fig.height, and fig.align options will allow user to customize the figure dimension
library(EBMAforecast)
data("presidentialForecast")
plot(presidentialForecast$Actual)
library("ggplot2", lib.loc="~/R/win-library/3.4")
rm(list=ls())
library(ggplot2)
# fig.width, fig.height, and fig.align options will allow user to customize the figure dimension
library(EBMAforecast)
data("presidentialForecast")
plot(presidentialForecast$Actual)
